@page "/EditAdult/{Id:int}"
@using ManagingFamilies.Data
@using ManagingFamilies.Models
@using ManagingFamilies.Persistance
@inject IAdultData AdultData
@inject IFileContext FileContext
@inject NavigationManager NavigationManager

<h3>EditAdult</h3>
<h5>Edit Adult with id: @Id</h5>

@if (adultToEdit == null)
{
    <em>Todo not found!</em>
}
else
{
    <EditForm Model="@adultToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/> <ValidationSummary/>
        <div class="form-group"> Id:<br/> <InputNumber @bind-Value="adultToEdit.Id"/> </div>
        <div class="form-group"> First name:<br/> <InputTextArea rows="1" @bind-Value="adultToEdit.FirstName"/> </div>
        <div class="form-group"> Last name:<br/> <InputTextArea rows="1" @bind-Value="adultToEdit.LastName"/> </div>
        <div class="form-group"> Hair color:<br/> <InputTextArea rows="1" @bind-Value="adultToEdit.HairColor"/> </div>
        <div class="form-group"> Eye color:<br/> <InputTextArea rows="1" @bind-Value="adultToEdit.EyeColor"/> </div>
        <div class="form-group"> Age:<br/> <InputNumber rows="1" @bind-Value="adultToEdit.Age"/> </div>
        <div class="form-group"> Weight:<br/> <InputNumber rows="1" @bind-Value="adultToEdit.Weight"/> </div>
        <div class="form-group"> Height:<br/> <InputNumber rows="1" @bind-Value="adultToEdit.Height"/> </div>
        <div class="form-group"> Sex:<br/> <InputTextArea rows="1" @bind-Value="adultToEdit.Sex"/> </div>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>
    </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private Adult adultToEdit;
    
    protected override async Task OnInitializedAsync()
    {
        adultToEdit = AdultData.GetAdult(Id);
    }


    private void Save()
    {
        AdultData.Update(adultToEdit);
        NavigationManager.NavigateTo("/AdultPage");
    }

}